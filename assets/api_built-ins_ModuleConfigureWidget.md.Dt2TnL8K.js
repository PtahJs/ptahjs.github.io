import{_ as s,c as t,o as a,af as e}from"./chunks/framework.D6bkN3-B.js";const g=JSON.parse('{"title":"<ModuleConfigureWidget>","description":"","frontmatter":{},"headers":[],"relativePath":"api/built-ins/ModuleConfigureWidget.md","filePath":"api/built-ins/ModuleConfigureWidget.md"}'),n={name:"api/built-ins/ModuleConfigureWidget.md"};function l(o,i,h,p,r,d){return a(),t("div",null,i[0]||(i[0]=[e(`<h1 id="moduleconfigurewidget" tabindex="-1"><code>&lt;ModuleConfigureWidget&gt;</code> <a class="header-anchor" href="#moduleconfigurewidget" aria-label="Permalink to &quot;\`&lt;ModuleConfigureWidget&gt;\`&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The <code>&lt;ModuleConfigureWidget&gt;</code> component must be used within a <code>&lt;Provider&gt;</code> component.</p></div><p>The <code>&lt;ModuleConfigureWidget&gt;</code> component is used to display and configure module parameters. It supports both a simplified version and a customizable version, offering a flexible slot system that allows developers to tailor the module configuration interface&#39;s content based on their needs.</p><h3 id="component-structure" tabindex="-1">Component Structure <a class="header-anchor" href="#component-structure" aria-label="Permalink to &quot;Component Structure&quot;">​</a></h3><p>The <code>&lt;ModuleConfigureWidget&gt;</code> component includes the following main parts:</p><ol><li><strong>header</strong> (optional): The title section of the module, usually displaying the module&#39;s name or label.</li><li><strong>groupHeader</strong> (optional): The title of the module group, used to categorize the module into different groups.</li><li><strong>before</strong> (optional): A content display area before the module parameters, which can be used to show additional information or descriptions.</li><li><strong>after</strong> (optional): A content display area after the module parameters, used for adding extra buttons or information.</li><li><strong>empty</strong> (optional): The empty state text displayed when no module parameters are available.</li></ol><h3 id="usage-example" tabindex="-1">Usage Example <a class="header-anchor" href="#usage-example" aria-label="Permalink to &quot;Usage Example&quot;">​</a></h3><h4 id="simplified-version" tabindex="-1">Simplified Version <a class="header-anchor" href="#simplified-version" aria-label="Permalink to &quot;Simplified Version&quot;">​</a></h4><p>In the simplified version, the <code>&lt;ModuleConfigureWidget&gt;</code> component automatically displays the module parameters, suitable for scenarios where no content customization is needed:</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ModuleConfigureWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="customizable-version" tabindex="-1">Customizable Version <a class="header-anchor" href="#customizable-version" aria-label="Permalink to &quot;Customizable Version&quot;">​</a></h4><p>In the customizable version, you can use slots to customize how each module configuration item is displayed. Below is an example where the content of each section is customized via slots:</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ModuleConfigureWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        &lt;!-- Custom Header section, displaying the module&#39;s label --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> #</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">item</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ item.label }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        &lt;!-- Custom Group Header section --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> #</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">groupHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">item</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ item.label }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        &lt;!-- Custom Before section, displaying information before the module --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> #</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">item</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        &lt;!-- Custom After section, displaying content after the module --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> #</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">item</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;2&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        &lt;!-- Empty state when there is no data --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> #</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">empty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;No data available&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ModuleConfigureWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="slot-explanation" tabindex="-1">Slot Explanation <a class="header-anchor" href="#slot-explanation" aria-label="Permalink to &quot;Slot Explanation&quot;">​</a></h3><ul><li><strong>header</strong> Slot: Customize the title display for each module. The <code>item</code> is the module&#39;s data object, typically containing the module&#39;s label or name.</li><li><strong>groupHeader</strong> Slot: Customize the title for the module group, used to categorize and display different modules.</li><li><strong>before</strong> Slot: Customize the content displayed before the module parameters. It is typically used to add extra description or information.</li><li><strong>after</strong> Slot: Customize the content displayed after the module parameters. It can be used to add buttons, links, or other interactive elements.</li><li><strong>empty</strong> Slot: The empty state text displayed when no module data is available, such as &quot;No data&quot; or &quot;No configuration.&quot;</li></ul><h3 id="configuration-and-customization" tabindex="-1">Configuration and Customization <a class="header-anchor" href="#configuration-and-customization" aria-label="Permalink to &quot;Configuration and Customization&quot;">​</a></h3><p>The <code>&lt;ModuleConfigureWidget&gt;</code> component offers high flexibility, allowing you to customize each module&#39;s display content via slots based on your requirements. In addition to basic slot customization, you can also combine it with other components for complex interactions and dynamic updates.</p><h3 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h3><ul><li>Ensure that the <code>&lt;ModuleConfigureWidget&gt;</code> component is always used within the context of the <code>&lt;Provider&gt;</code> component, as it depends on the global state or functionality provided by the Provider.</li><li>When using slots, you can choose to only implement the parts that need customization. Undefined parts will use the component&#39;s default display.</li></ul><h3 id="using-with-other-components" tabindex="-1">Using with Other Components <a class="header-anchor" href="#using-with-other-components" aria-label="Permalink to &quot;Using with Other Components&quot;">​</a></h3><p>The <code>&lt;ModuleConfigureWidget&gt;</code> component can be combined with other configuration-related components, such as dynamic forms or drag-and-drop sorting, to build a complex module configuration interface.</p>`,21)]))}const E=s(n,[["render",l]]);export{g as __pageData,E as default};
