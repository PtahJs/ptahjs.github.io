import{_ as i,c as a,o as p,af as n}from"./chunks/framework.D6bkN3-B.js";const o=JSON.parse('{"title":"应用实例 API","description":"","frontmatter":{},"headers":[],"relativePath":"zh/api/application.md","filePath":"zh/api/application.md"}'),l={name:"zh/api/application.md"};function e(t,s,h,k,d,E){return p(),a("div",null,s[0]||(s[0]=[n(`<h1 id="应用实例-api" tabindex="-1">应用实例 API <a class="header-anchor" href="#应用实例-api" aria-label="Permalink to &quot;应用实例 API&quot;">​</a></h1><h2 id="createptah" tabindex="-1"><code>createPtah()</code> <a class="header-anchor" href="#createptah" aria-label="Permalink to &quot;\`createPtah()\`&quot;">​</a></h2><p>该方法用于创建一个新的应用实例。通过此实例，您可以访问应用的各种功能和配置项。</p><ul><li><p><strong>详细说明</strong><br><code>id</code> 是必填参数，用于唯一标识每个应用实例，确保不同实例之间的隔离。应用的其他设置可以根据实际需求进行配置。 <code>licenseKey</code> 是必填参数，授权码</p></li><li><p><strong>参数</strong></p><ul><li><code>id</code> (String): 应用实例的唯一标识符，不能为空。</li><li><code>licenseKey</code> (String): 应用实例的授权码，不能为空。</li></ul></li><li><p><strong>示例</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createPtah } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@ptahjs/creative-vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createPtah</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app-1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置应用实例的唯一ID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    licenseKey: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;******&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></li></ul><h2 id="app-id" tabindex="-1"><code>app.id</code> <a class="header-anchor" href="#app-id" aria-label="Permalink to &quot;\`app.id\`&quot;">​</a></h2><p>该属性用于获取当前应用实例的唯一标识符。通过此属性，您可以方便地访问和验证当前应用实例。</p><ul><li><p><strong>详细说明</strong><br><code>app.id</code> 返回应用实例的 <code>id</code> 值，帮助开发者在多实例环境中进行区分。</p></li><li><p><strong>示例</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(app.id); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：&#39;ptah-app-1&#39;</span></span></code></pre></div></li></ul><h2 id="app-modetype" tabindex="-1"><code>app.modeType</code> <a class="header-anchor" href="#app-modetype" aria-label="Permalink to &quot;\`app.modeType\`&quot;">​</a></h2><p>该属性返回当前应用所使用的模式类型。可以用来区分应用的运行模式，帮助进行不同场景下的配置和渲染。</p><ul><li><p><strong>详细说明</strong><br><code>modeType</code> 返回当前应用的模式，如 <code>WEB</code>，<code>MOBILE</code>，<code>CANVAS</code> 等，您可以根据需要切换不同的模式。</p></li><li><p><strong>示例</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(app.modeType); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：&#39;WEB&#39;</span></span></code></pre></div><p>参考 <a href="#">模式类型</a> 获取更多信息。</p></li></ul><h2 id="app-load" tabindex="-1"><code>app.$load()</code> <a class="header-anchor" href="#app-load" aria-label="Permalink to &quot;\`app.$load()\`&quot;">​</a></h2><p>该方法用于加载应用所需的各种资源。在编辑模式下，您需要加载积木块数据、场景参数以及事件等。</p><ul><li><p><strong>详细说明</strong><br><code>app.$load()</code> 允许您加载各种资源，支持动态加载不同类型的资源，以便在运行时灵活扩展应用功能。</p></li><li><p><strong>参数</strong></p><ul><li><code>resourceType</code> (String): 资源的类型（如 <code>BLOCKS</code>，<code>SCENE_PROPS</code>，<code>SCENE_EVENTS</code>）。</li><li><code>data</code> (Array): 要加载的资源数据。</li></ul></li><li><p><strong>示例</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { RESOURCE_TYPE } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@ptahjs/creative-vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 加载模块、场景参数和事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RESOURCE_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BLOCKS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, []);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RESOURCE_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SCENE_PROPS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, []);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RESOURCE_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SCENE_EVENTS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, []);</span></span></code></pre></div><p>参考 <a href="#">资源类型</a> 获取更多信息。</p></li></ul><h2 id="app-proxydata" tabindex="-1"><code>app.$proxyData()</code> <a class="header-anchor" href="#app-proxydata" aria-label="Permalink to &quot;\`app.$proxyData()\`&quot;">​</a></h2><p>该方法用于代理应用中的数据，将其转换为响应式数据。适用于 Vue 3 项目，可以通过数据代理轻松实现响应式管理。</p><ul><li><p><strong>详细说明</strong><br><code>app.$proxyData()</code> 接收一个函数，该函数返回代理后的数据，确保数据能够在视图中实时更新。</p></li><li><p><strong>示例</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$proxyData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data));</span></span></code></pre></div></li></ul><h2 id="app-lifecycle" tabindex="-1"><code>app.$lifecycle()</code> <a class="header-anchor" href="#app-lifecycle" aria-label="Permalink to &quot;\`app.$lifecycle()\`&quot;">​</a></h2><p>生命周期管理方法，通常用于插件开发中。通过该方法，插件可以在应用的特定生命周期阶段修改数据，帮助实现更精细的控制。</p><ul><li><p><strong>详细说明</strong><br><code>app.$lifecycle()</code> 可以注册钩子函数，用于在应用的不同生命周期阶段修改数据。例如，可以在数据转换前进行干预，或者在数据加载完成后执行其他操作。</p></li><li><p><strong>参数</strong></p><ul><li><code>lifecycleType</code> (String): 生命周期类型，例如 <code>BEFORE_TRANSFORM_DATA</code>。</li><li><code>callback</code> (Function): 钩子函数，用于执行自定义操作。</li></ul></li><li><p><strong>示例</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { LIFECYCLE_TYPE } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@ptahjs/creative-vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;TestPlugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        engine.$lifecycle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">notify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LIFECYCLE_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BEFORE_TRANSFORM_DATA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;BEFORE_TRANSFORM_DATA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改数据并返回</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>参考 <a href="#">生命周期类型</a> 获取更多信息。</p></li></ul><h2 id="app-blocks" tabindex="-1"><code>app.$blocks()</code> <a class="header-anchor" href="#app-blocks" aria-label="Permalink to &quot;\`app.$blocks()\`&quot;">​</a></h2><p>该方法用于加载和动态添加积木块数据。积木块是构建应用的核心模块，您可以通过此方法动态调整模块内容。</p><ul><li><p><strong>详细说明</strong><br><code>app.$blocks()</code> 可以加载多个积木块配置，并将其添加到应用中。支持动态更新积木块的数据，适合在编辑模式下使用。</p></li><li><p><strong>示例</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.$blocks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;远程组件&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        icon: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;icon-detail&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        items: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                icon: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;icon-detail&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                items: [data.data]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span></code></pre></div><p>参考 <a href="#">积木块数据</a> 获取更多信息。</p></li></ul><h2 id="app-vueinstance" tabindex="-1"><code>app.$vueInstance()</code> <a class="header-anchor" href="#app-vueinstance" aria-label="Permalink to &quot;\`app.$vueInstance()\`&quot;">​</a></h2><p>该方法用于将一个 Vue 实例绑定到应用中。通过该方法，您可以在应用中自动注册 Vue 组件及执行其他 Vue 相关操作。</p><ul><li><p><strong>详细说明</strong><br><code>app.$vueInstance()</code> 允许在应用中直接注册 Vue 组件，简化了 Vue 实例的管理。</p></li><li><p><strong>示例</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createApp } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> App </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./App.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(App);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptahInstance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$vueInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(app);</span></span></code></pre></div></li></ul><h2 id="app-mode" tabindex="-1"><code>app.$mode()</code> <a class="header-anchor" href="#app-mode" aria-label="Permalink to &quot;\`app.$mode()\`&quot;">​</a></h2><p>该方法用于设置应用的场景模式。通过选择不同的场景模式，您可以控制应用的表现形式，适应不同平台或需求。</p><ul><li><p><strong>详细说明</strong><br><code>app.$mode()</code> 接受场景模式作为参数，您可以通过该方法选择不同的扩展场景模式，如 Web、移动端或 3D 等。</p></li><li><p><strong>示例</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ModeWeb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@ptahjs/mode-web&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptahInstance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ModeWeb);</span></span></code></pre></div></li></ul><h2 id="app-use" tabindex="-1"><code>app.use()</code> <a class="header-anchor" href="#app-use" aria-label="Permalink to &quot;\`app.use()\`&quot;">​</a></h2><p>该方法用于将插件或其他功能模块安装到应用中。</p><ul><li><strong>详细说明</strong><br><code>app.use()</code> 允许在应用中动态安装插件或库，拓展应用的功能。</li></ul><h2 id="app-schema" tabindex="-1"><code>app.schema()</code> <a class="header-anchor" href="#app-schema" aria-label="Permalink to &quot;\`app.schema()\`&quot;">​</a></h2><p>该方法用于加载schema数据,回显并渲染成页面。</p><ul><li><strong>详细说明</strong><br><code>app.schema()</code> 允许在应用中动态加载schema数据。</li></ul><h2 id="app-mount" tabindex="-1"><code>app.mount()</code> <a class="header-anchor" href="#app-mount" aria-label="Permalink to &quot;\`app.mount()\`&quot;">​</a></h2><p>该方法用于挂载应用并启动它。通过 <code>mount()</code> 方法，您可以正式启动应用，进行渲染并处理事件。</p><ul><li><strong>备注</strong><br> 带 <code>$</code> 前缀的方法是内置的插件扩展，支持链式调用，以简化配置过程。</li></ul><h2 id="app-unmount" tabindex="-1"><code>app.unmount()</code> <a class="header-anchor" href="#app-unmount" aria-label="Permalink to &quot;\`app.unmount()\`&quot;">​</a></h2><p>该方法用于卸载应用实例，停止所有操作。</p><h2 id="链式调用支持" tabindex="-1">链式调用支持 <a class="header-anchor" href="#链式调用支持" aria-label="Permalink to &quot;链式调用支持&quot;">​</a></h2><p>您可以通过链式调用一次性完成多个配置和初始化步骤，从而提高代码的简洁性和可读性。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ptahInstance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createPtah</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app-1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    licenseKey: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;******&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vueInstance)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ModeWeb)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RESOURCE_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BLOCKS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>`,42)]))}const c=i(l,[["render",e]]);export{o as __pageData,c as default};
