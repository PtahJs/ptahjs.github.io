import{_ as e,c as i,o as t,af as a}from"./chunks/framework.D6bkN3-B.js";const k=JSON.parse('{"title":"<ScenesWidget>","description":"","frontmatter":{},"headers":[],"relativePath":"api/built-ins/ScenesWidget.md","filePath":"api/built-ins/ScenesWidget.md"}'),n={name:"api/built-ins/ScenesWidget.md"};function l(o,s,h,p,d,c){return t(),i("div",null,s[0]||(s[0]=[a(`<h1 id="sceneswidget" tabindex="-1"><code>&lt;ScenesWidget&gt;</code> <a class="header-anchor" href="#sceneswidget" aria-label="Permalink to &quot;\`&lt;ScenesWidget&gt;\`&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The <code>&lt;ScenesWidget&gt;</code> component must be used within a <code>&lt;Provider&gt;</code> component.</p></div><p>The <code>&lt;ScenesWidget&gt;</code> component is used to display a list of scenes and allows for customization of the content displayed for each scene. This component provides an easy way for users to view and manage multiple scenes.</p><h3 id="usage-example" tabindex="-1">Usage Example <a class="header-anchor" href="#usage-example" aria-label="Permalink to &quot;Usage Example&quot;">​</a></h3><h4 id="basic-version" tabindex="-1">Basic Version <a class="header-anchor" href="#basic-version" aria-label="Permalink to &quot;Basic Version&quot;">​</a></h4><p>In the basic version, you can directly use the <code>&lt;ScenesWidget&gt;</code> component, which by default displays the scene list without any additional customization:</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ScenesWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ScenesWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="custom-version" tabindex="-1">Custom Version <a class="header-anchor" href="#custom-version" aria-label="Permalink to &quot;Custom Version&quot;">​</a></h4><p>You can use slots to customize the display of each scene item. For example, you can customize the scene content and the empty state message:</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ScenesWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> #</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">item</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ item.props.title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item.title }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> #</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">empty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;No Data&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ScenesWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="slot-explanation" tabindex="-1">Slot Explanation <a class="header-anchor" href="#slot-explanation" aria-label="Permalink to &quot;Slot Explanation&quot;">​</a></h3><ul><li><strong><code>#content</code></strong>: Customizes the display content of each scene item. The <code>item</code> parameter contains the data for each scene, and typically you can access properties such as <code>title</code> or other scene-related attributes. In the example, <code>item.props.title</code> or <code>item.title</code> is used to display the scene title.</li><li><strong><code>#empty</code></strong>: Displays a message when there is no scene data.</li></ul><h3 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h3><ul><li><strong><code>&lt;Provider&gt;</code> component</strong>: The <code>&lt;ScenesWidget&gt;</code> must be contained within a <code>&lt;Provider&gt;</code> component to ensure the correct context and functional support.</li><li><strong>Slot Customization</strong>: Through the <code>#content</code> slot, you can flexibly customize the display of the scene list, including displaying specific fields or using custom components.</li><li><strong>Empty Data Message</strong>: By using the <code>#empty</code> slot, you can customize the message shown when there is no data, providing a better user experience.</li></ul>`,14)]))}const E=e(n,[["render",l]]);export{k as __pageData,E as default};
