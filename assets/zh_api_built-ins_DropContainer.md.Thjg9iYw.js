import{_ as s,c as a,o as t,af as e}from"./chunks/framework.D6bkN3-B.js";const c=JSON.parse('{"title":"<DropContainer>","description":"","frontmatter":{},"headers":[],"relativePath":"zh/api/built-ins/DropContainer.md","filePath":"zh/api/built-ins/DropContainer.md"}'),n={name:"zh/api/built-ins/DropContainer.md"};function l(o,i,h,p,r,d){return t(),a("div",null,i[0]||(i[0]=[e(`<h1 id="dropcontainer" tabindex="-1"><code>&lt;DropContainer&gt;</code> <a class="header-anchor" href="#dropcontainer" aria-label="Permalink to &quot;\`&lt;DropContainer&gt;\`&quot;">​</a></h1><p><code>&lt;DropContainer&gt;</code> 组件用于创建一个放置区域，可以与拖拽组件（如 <code>&lt;DndItem&gt;</code> 或 <code>&lt;DragCloneItem&gt;</code>）配合使用，实现拖放交互。它为被拖拽的项提供一个放置目标区域，适用于需要管理拖放内容的场景。</p><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><ul><li><p><strong>id</strong> (<code>String</code>):</p><ul><li>当前区域的唯一标识符，可以是图层ID或模块插槽ID。用于区分不同的放置区域。</li><li><strong>示例</strong>: <code>&quot;layer1&quot;</code>, <code>&quot;slotA&quot;</code></li></ul></li><li><p><strong>type</strong> (<code>String</code>):</p><ul><li>拖拽类型，用于与拖拽项的类型匹配，决定该区域可以接收的拖拽项类型。</li><li><strong>示例</strong>: <code>&quot;move&quot;</code>, <code>&quot;copy&quot;</code></li></ul></li></ul><h3 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h3><h4 id="基本示例" tabindex="-1">基本示例 <a class="header-anchor" href="#基本示例" aria-label="Permalink to &quot;基本示例&quot;">​</a></h4><p>在最简单的用法中，<code>&lt;DropContainer&gt;</code> 作为一个放置区域使用，接收来自拖拽组件的项。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DropContainer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;move&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;container1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="详细示例" tabindex="-1">详细示例 <a class="header-anchor" href="#详细示例" aria-label="Permalink to &quot;详细示例&quot;">​</a></h4><p>在这个示例中，<code>&lt;DropContainer&gt;</code> 组件为一个放置区域，接收 <code>type=&quot;move&quot;</code> 类型的拖拽项，<code>id</code> 为 <code>&quot;container1&quot;</code>。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DropContainer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;move&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;container1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        &lt;!-- 可选：在放置区域中添加自定义内容或样式 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Drop items here&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DropContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li><strong>放置区域标识</strong>：<code>id</code> 属性用于标识放置区域，确保拖拽项与正确的目标区域进行匹配。它也可以用于跨多个区域进行拖拽操作时的目标区域识别。</li><li><strong><code>type</code> 属性</strong>：<code>type</code> 属性决定了该区域可以接收的拖拽项类型。确保 <code>DropContainer</code> 和拖拽项的类型匹配，以便正确的拖放行为。</li><li><strong>自定义内容</strong>：<code>&lt;DropContainer&gt;</code> 组件支持插槽，可以在放置区域内添加自定义的内容或样式，从而让放置区域具有更灵活的显示和交互功能。</li></ul><h3 id="配合其他组件使用" tabindex="-1">配合其他组件使用 <a class="header-anchor" href="#配合其他组件使用" aria-label="Permalink to &quot;配合其他组件使用&quot;">​</a></h3><p><code>&lt;DropContainer&gt;</code> 通常与 <code>&lt;DndItem&gt;</code> 或 <code>&lt;DragCloneItem&gt;</code> 等组件配合使用，构建完整的拖放交互。它可以与多个放置区域组合使用，以实现复杂的拖拽场景。</p>`,15)]))}const E=s(n,[["render",l]]);export{c as __pageData,E as default};
