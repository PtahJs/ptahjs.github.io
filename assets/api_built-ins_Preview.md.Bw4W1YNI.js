import{_ as s,c as i,o as a,af as t}from"./chunks/framework.D6bkN3-B.js";const k=JSON.parse('{"title":"<Preview>","description":"","frontmatter":{},"headers":[],"relativePath":"api/built-ins/Preview.md","filePath":"api/built-ins/Preview.md"}'),n={name:"api/built-ins/Preview.md"};function o(h,e,r,l,p,d){return a(),i("div",null,e[0]||(e[0]=[t(`<h1 id="preview" tabindex="-1"><code>&lt;Preview&gt;</code> <a class="header-anchor" href="#preview" aria-label="Permalink to &quot;\`&lt;Preview&gt;\`&quot;">​</a></h1><p>The <code>&lt;Preview&gt;</code> component is used to preview the rendered content, typically for dynamic rendering based on the passed JSON data. It accepts two parameters, <code>id</code> and <code>schema</code>, which specify the <code>ptah</code> instance&#39;s ID and the corresponding JSON data to be rendered.</p><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><p><strong>id</strong> (<code>String</code>):</p><ul><li>The ID passed when creating a <code>ptah</code> instance using <code>createPtah</code>, used to identify and select the specific <code>ptah</code> instance.</li><li><strong>Example</strong>: <code>&quot;ptah-1&quot;</code></li></ul></li><li><p><strong>schema</strong> (<code>Object</code>):</p><ul><li>The JSON data to be rendered. This data serves as the basis for the rendered content, typically containing the configuration and content for modules or components.</li><li><strong>Example</strong>: <code>{ title: &quot;Sample Module&quot;, content: &quot;This is a preview.&quot; }</code></li></ul></li></ul><h3 id="usage-example" tabindex="-1">Usage Example <a class="header-anchor" href="#usage-example" aria-label="Permalink to &quot;Usage Example&quot;">​</a></h3><h4 id="basic-example" tabindex="-1">Basic Example <a class="header-anchor" href="#basic-example" aria-label="Permalink to &quot;Basic Example&quot;">​</a></h4><p>In the simplest use case, the <code>&lt;Preview&gt;</code> component receives the <code>id</code> and <code>schema</code> parameters and renders the corresponding content:</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Preview</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ptah-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">schema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jsonData</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            jsonData: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Sample Module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                content: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;This is a preview.&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>In this example, <code>jsonData</code> is a JSON object containing the content to be rendered, which is passed to the <code>&lt;Preview&gt;</code> component via the <code>schema</code> property for rendering.</p><h3 id="configuration-and-customization" tabindex="-1">Configuration and Customization <a class="header-anchor" href="#configuration-and-customization" aria-label="Permalink to &quot;Configuration and Customization&quot;">​</a></h3><ul><li><strong>id</strong> property: Ensure that the <code>id</code> corresponds to the instance ID created with <code>createPtah</code> to correctly render the associated content.</li><li><strong>schema</strong> property: Ensure that the passed <code>schema</code> is a valid JSON object containing the content and configuration to be rendered.</li></ul><h3 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h3><ul><li><strong><code>id</code> property</strong>: The <code>id</code> must correspond to the ID used when creating the <code>ptah</code> instance with <code>createPtah</code>, ensuring that the correct instance content is rendered.</li><li><strong><code>schema</code> property</strong>: The <code>schema</code> must be a valid JSON data object containing the correct rendering information. Make sure its structure meets the component or module&#39;s requirements.</li></ul><h3 id="using-with-other-components" tabindex="-1">Using with Other Components <a class="header-anchor" href="#using-with-other-components" aria-label="Permalink to &quot;Using with Other Components&quot;">​</a></h3><p>The <code>&lt;Preview&gt;</code> component is typically used in conjunction with other components or tools, such as dynamic forms or module configurations, to provide real-time previews and interactive experiences.</p>`,15)]))}const E=s(n,[["render",o]]);export{k as __pageData,E as default};
