import{_ as t,c as a,o as i,af as s}from"./chunks/framework.D6bkN3-B.js";const u=JSON.parse('{"title":"<ModulesRenderer>","description":"","frontmatter":{},"headers":[],"relativePath":"api/built-ins/ModulesRenderer.md","filePath":"api/built-ins/ModulesRenderer.md"}'),o={name:"api/built-ins/ModulesRenderer.md"};function n(d,e,l,r,h,c){return i(),a("div",null,e[0]||(e[0]=[s('<h1 id="modulesrenderer" tabindex="-1"><code>&lt;ModulesRenderer&gt;</code> <a class="header-anchor" href="#modulesrenderer" aria-label="Permalink to &quot;`&lt;ModulesRenderer&gt;`&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Built-in components do not require registration and can be directly used in the template.</p></div><p>The <code>&lt;ModulesRenderer&gt;</code> component is used to render specific module content, suitable for scenarios that require dynamic rendering of module items. It must be used within the context of a <code>&lt;Provider&gt;</code> component and accepts an <code>item</code> property, which is used to pass the module data to be rendered.</p><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><strong>item</strong> (<code>Object</code>): <ul><li>The module item to be rendered, usually an object containing detailed data for the module.</li><li><strong>Example</strong>: <code>item.items[0]</code>, where <code>items</code> is an array containing multiple module items, and <code>[0]</code> refers to one of the modules.</li></ul></li></ul><h3 id="usage-example" tabindex="-1">Usage Example <a class="header-anchor" href="#usage-example" aria-label="Permalink to &quot;Usage Example&quot;">​</a></h3><h4 id="basic-example" tabindex="-1">Basic Example <a class="header-anchor" href="#basic-example" aria-label="Permalink to &quot;Basic Example&quot;">​</a></h4><p>In the basic usage, the <code>&lt;ModulesRenderer&gt;</code> component will render the corresponding module content based on the passed <code>item</code>:</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ModulesRenderer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">item.items[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>In the example above, <code>item.items[0]</code> is the module data passed in, and the <code>&lt;ModulesRenderer&gt;</code> will render the corresponding module based on this data.</p><h3 id="configuration-and-customization" tabindex="-1">Configuration and Customization <a class="header-anchor" href="#configuration-and-customization" aria-label="Permalink to &quot;Configuration and Customization&quot;">​</a></h3><p>The <code>&lt;ModulesRenderer&gt;</code> will automatically render the related content based on the passed module data. You can control the rendering of different module items by dynamically changing the <code>item</code> data.</p><h3 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h3><ul><li>Ensure that the <code>&lt;ModulesRenderer&gt;</code> component is always used within the context of the <code>&lt;Provider&gt;</code> component, as it depends on the global state or functionality provided by the Provider.</li><li>The <code>item</code> data must be a valid module data object containing the content and configuration to be rendered.</li></ul><h3 id="using-with-other-components" tabindex="-1">Using with Other Components <a class="header-anchor" href="#using-with-other-components" aria-label="Permalink to &quot;Using with Other Components&quot;">​</a></h3><p>The <code>&lt;ModulesRenderer&gt;</code> component can be combined with other module-related components, such as <code>&lt;ModuleConfigureWidget&gt;</code> or <code>&lt;EventsWidget&gt;</code>, to build more complex module rendering and interaction experiences.</p>',16)]))}const m=t(o,[["render",n]]);export{u as __pageData,m as default};
