import{_ as s,c as a,o as t,af as e}from"./chunks/framework.D6bkN3-B.js";const g=JSON.parse('{"title":"<DragCloneItem>","description":"","frontmatter":{},"headers":[],"relativePath":"zh/api/built-ins/DragCloneItem.md","filePath":"zh/api/built-ins/DragCloneItem.md"}'),l={name:"zh/api/built-ins/DragCloneItem.md"};function n(h,i,o,p,r,d){return t(),a("div",null,i[0]||(i[0]=[e(`<h1 id="dragcloneitem" tabindex="-1"><code>&lt;DragCloneItem&gt;</code> <a class="header-anchor" href="#dragcloneitem" aria-label="Permalink to &quot;\`&lt;DragCloneItem&gt;\`&quot;">​</a></h1><p><code>&lt;DragCloneItem&gt;</code> 组件用于实现拖拽物体的克隆功能。当拖动目标项时，组件会创建该项的克隆版本，并允许用户进行拖拽操作。适用于需要展示拖拽时效果的场景，例如拖拽副本、视觉反馈等。</p><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><ul><li><strong>item</strong> (<code>Object</code>): <ul><li>拖拽项目的数据对象，包含拖拽项的具体信息。</li><li><strong>示例</strong>: <code>{ id: &#39;item1&#39;, name: &#39;Drag Me&#39;, value: 100 }</code></li></ul></li><li><strong>type</strong> (<code>String</code>): <ul><li>拖拽类型，用于区分不同的拖拽行为或操作，通常与拖拽的目标区分开来。</li><li><strong>示例</strong>: <code>&quot;move&quot;</code>, <code>&quot;copy&quot;</code></li></ul></li></ul><h3 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h3><h4 id="基本示例" tabindex="-1">基本示例 <a class="header-anchor" href="#基本示例" aria-label="Permalink to &quot;基本示例&quot;">​</a></h4><p>在基本的用法中，<code>&lt;DragCloneItem&gt;</code> 组件会克隆拖拽项，并支持拖动该克隆项。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DragCloneItem</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;move&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ id: &#39;item1&#39;, name: &#39;Item 1&#39;, value: 100 }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="详细示例" tabindex="-1">详细示例 <a class="header-anchor" href="#详细示例" aria-label="Permalink to &quot;详细示例&quot;">​</a></h4><p>在这个示例中，组件展示了一个拖拽克隆项，拖拽时会创建该项的副本，供用户操作。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DragCloneItem</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;move&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ id: &#39;item2&#39;, name: &#39;Item 2&#39;, value: 200 }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        &lt;!-- 可选：添加自定义内容或样式 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ item.name }} - {{ item.value }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DragCloneItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li><strong>克隆拖拽效果</strong>：<code>&lt;DragCloneItem&gt;</code> 组件会在拖动时创建物体的克隆副本，不会影响原始项的数据。克隆项仅用于拖拽时的显示。</li><li><strong><code>type</code> 属性</strong>：<code>type</code> 可以指定拖拽类型，可以根据需要处理不同的拖拽行为。例如，<code>move</code> 表示移动，<code>copy</code> 表示复制。</li><li><strong><code>item</code> 参数</strong>：可以通过 <code>item</code> 传递任何自定义的数据对象，以便在拖拽过程中能够提供更多的状态信息。</li></ul><h3 id="配合其他组件使用" tabindex="-1">配合其他组件使用 <a class="header-anchor" href="#配合其他组件使用" aria-label="Permalink to &quot;配合其他组件使用&quot;">​</a></h3><p>为了实现完整的拖拽交互，<code>&lt;DragCloneItem&gt;</code> 可以与其他拖拽相关组件（如 <code>&lt;DragDropZone&gt;</code> 或 <code>&lt;DndContainer&gt;</code>）一起使用，确保实现完整的拖拽逻辑和反馈。</p>`,15)]))}const E=s(l,[["render",n]]);export{g as __pageData,E as default};
