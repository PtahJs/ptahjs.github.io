import{_ as i,c as a,o as e,af as t}from"./chunks/framework.D6bkN3-B.js";const c=JSON.parse('{"title":"<Preview>","description":"","frontmatter":{},"headers":[],"relativePath":"zh/api/built-ins/Preview.md","filePath":"zh/api/built-ins/Preview.md"}'),n={name:"zh/api/built-ins/Preview.md"};function l(h,s,p,d,o,r){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="preview" tabindex="-1"><code>&lt;Preview&gt;</code> <a class="header-anchor" href="#preview" aria-label="Permalink to &quot;\`&lt;Preview&gt;\`&quot;">​</a></h1><p><code>&lt;Preview&gt;</code> 组件用于预览渲染的内容，通常用于根据传入的 JSON 数据进行动态渲染。它接受 <code>id</code> 和 <code>schema</code> 两个参数，用于指定需要渲染的 <code>ptah</code> 实例的 ID 和对应的 JSON 数据。</p><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><ul><li><p><strong>id</strong> (<code>String</code>):</p><ul><li>对应 <code>createPtah</code> 时传入的 ID，用于标识并选择特定的 <code>ptah</code> 实例。</li><li><strong>示例</strong>: <code>&quot;ptah-1&quot;</code></li></ul></li><li><p><strong>schema</strong> (<code>Object</code>):</p><ul><li>需要渲染的 JSON 数据。该数据将作为渲染内容的基础，通常包含模块或组件的配置和内容。</li><li><strong>示例</strong>: <code>{ title: &quot;Sample Module&quot;, content: &quot;This is a preview.&quot; }</code></li></ul></li></ul><h3 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h3><h4 id="基本示例" tabindex="-1">基本示例 <a class="header-anchor" href="#基本示例" aria-label="Permalink to &quot;基本示例&quot;">​</a></h4><p>在最简单的使用场景中，<code>&lt;Preview&gt;</code> 组件接收 <code>id</code> 和 <code>schema</code> 两个参数，并渲染相应的内容：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Preview</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ptah-1&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :schema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jsonData&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            jsonData: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Sample Module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                content: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;This is a preview.&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在此示例中，<code>jsonData</code> 是一个包含需要渲染的内容的 JSON 对象，通过 <code>schema</code> 属性传递给 <code>&lt;Preview&gt;</code> 组件进行渲染。</p><h3 id="配置和自定义" tabindex="-1">配置和自定义 <a class="header-anchor" href="#配置和自定义" aria-label="Permalink to &quot;配置和自定义&quot;">​</a></h3><ul><li><strong>id</strong> 属性：确保 <code>id</code> 对应于通过 <code>createPtah</code> 创建的实例的 ID，以便正确渲染对应的内容。</li><li><strong>schema</strong> 属性：确保传递的 <code>schema</code> 是一个有效的 JSON 对象，包含需要渲染的内容和配置项。</li></ul><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li><strong><code>id</code> 属性</strong>：<code>id</code> 必须对应于 <code>createPtah</code> 创建时使用的 ID，确保渲染正确的实例内容。</li><li><strong><code>schema</code> 属性</strong>：<code>schema</code> 必须是一个有效的 JSON 数据对象，包含正确的渲染信息。确保其结构符合组件或模块的需求。</li></ul><h3 id="配合其他组件使用" tabindex="-1">配合其他组件使用 <a class="header-anchor" href="#配合其他组件使用" aria-label="Permalink to &quot;配合其他组件使用&quot;">​</a></h3><p><code>&lt;Preview&gt;</code> 组件通常与其他组件或工具配合使用，如动态表单、模块配置等，以提供实时预览和交互体验。</p>`,15)]))}const E=i(n,[["render",l]]);export{c as __pageData,E as default};
