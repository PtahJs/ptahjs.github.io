import{_ as t,c as a,o as i,af as s}from"./chunks/framework.D6bkN3-B.js";const k=JSON.parse('{"title":"<DropContainer>","description":"","frontmatter":{},"headers":[],"relativePath":"api/built-ins/DropContainer.md","filePath":"api/built-ins/DropContainer.md"}'),n={name:"api/built-ins/DropContainer.md"};function o(r,e,l,p,d,h){return i(),a("div",null,e[0]||(e[0]=[s(`<h1 id="dropcontainer" tabindex="-1"><code>&lt;DropContainer&gt;</code> <a class="header-anchor" href="#dropcontainer" aria-label="Permalink to &quot;\`&lt;DropContainer&gt;\`&quot;">​</a></h1><p>The <code>&lt;DropContainer&gt;</code> component is used to create a drop zone that can be used in conjunction with drag-and-drop components (such as <code>&lt;DndItem&gt;</code> or <code>&lt;DragCloneItem&gt;</code>) to implement drag-and-drop interactions. It provides a target area for the dragged items, making it suitable for scenarios where managing drag-and-drop content is required.</p><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><p><strong>id</strong> (<code>String</code>):</p><ul><li>The unique identifier for the drop zone, which can be a layer ID or a module slot ID. It is used to distinguish different drop areas.</li><li><strong>Example</strong>: <code>&quot;layer1&quot;</code>, <code>&quot;slotA&quot;</code></li></ul></li><li><p><strong>type</strong> (<code>String</code>):</p><ul><li>The drag-and-drop type, which is used to match the type of draggable items and determine what type of items this zone can accept.</li><li><strong>Example</strong>: <code>&quot;move&quot;</code>, <code>&quot;copy&quot;</code></li></ul></li></ul><h3 id="usage-example" tabindex="-1">Usage Example <a class="header-anchor" href="#usage-example" aria-label="Permalink to &quot;Usage Example&quot;">​</a></h3><h4 id="basic-example" tabindex="-1">Basic Example <a class="header-anchor" href="#basic-example" aria-label="Permalink to &quot;Basic Example&quot;">​</a></h4><p>In its simplest usage, the <code>&lt;DropContainer&gt;</code> serves as a drop zone that receives items from drag-and-drop components.</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DropContainer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;move&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;container1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="detailed-example" tabindex="-1">Detailed Example <a class="header-anchor" href="#detailed-example" aria-label="Permalink to &quot;Detailed Example&quot;">​</a></h4><p>In this example, the <code>&lt;DropContainer&gt;</code> component serves as a drop zone that accepts draggable items of type <code>move</code>, and its <code>id</code> is set to <code>&quot;container1&quot;</code>.</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DropContainer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;move&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;container1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        &lt;!-- Optional: Add custom content or styles within the drop zone --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Drop items here&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DropContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h3><ul><li><strong>Drop Zone Identifier</strong>: The <code>id</code> property is used to identify the drop zone, ensuring that dragged items are matched with the correct target area. It can also be used for target area identification when performing drag-and-drop operations across multiple areas.</li><li><strong><code>type</code> Property</strong>: The <code>type</code> property determines which types of draggable items the drop zone can accept. Ensure that the <code>DropContainer</code> and the draggable items are of matching types to ensure proper drag-and-drop behavior.</li><li><strong>Custom Content</strong>: The <code>&lt;DropContainer&gt;</code> component supports slots, allowing you to add custom content or styles inside the drop zone for more flexible display and interaction features.</li></ul><h3 id="using-with-other-components" tabindex="-1">Using with Other Components <a class="header-anchor" href="#using-with-other-components" aria-label="Permalink to &quot;Using with Other Components&quot;">​</a></h3><p>The <code>&lt;DropContainer&gt;</code> is typically used in combination with components like <code>&lt;DndItem&gt;</code> or <code>&lt;DragCloneItem&gt;</code> to build complete drag-and-drop interactions. It can be used with multiple drop zones to create complex drag-and-drop scenarios.</p>`,15)]))}const g=t(n,[["render",o]]);export{k as __pageData,g as default};
