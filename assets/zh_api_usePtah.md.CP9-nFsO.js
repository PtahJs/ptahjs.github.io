import{_ as i,c as a,o as n,af as t}from"./chunks/framework.D6bkN3-B.js";const E=JSON.parse('{"title":"使用实例 API","description":"","frontmatter":{},"headers":[],"relativePath":"zh/api/usePtah.md","filePath":"zh/api/usePtah.md"}'),h={name:"zh/api/usePtah.md"};function e(l,s,p,k,r,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="使用实例-api" tabindex="-1">使用实例 API <a class="header-anchor" href="#使用实例-api" aria-label="Permalink to &quot;使用实例 API&quot;">​</a></h1><h2 id="useptah" tabindex="-1"><code>usePtah()</code> <a class="header-anchor" href="#useptah" aria-label="Permalink to &quot;\`usePtah()\`&quot;">​</a></h2><p><code>usePtah</code> 是用于获取和操作 <code>ptah</code> 实例的函数，主要用于在 Vue 组件中创建并管理 <code>ptah</code> 实例的生命周期。该函数能够帮助你初始化和配置低代码平台的实例。</p><h3 id="参数说明" tabindex="-1">参数说明 <a class="header-anchor" href="#参数说明" aria-label="Permalink to &quot;参数说明&quot;">​</a></h3><ul><li><strong>id</strong>: (必填) 唯一标识 <code>ptah</code> 实例的 ID，通常用来区分不同的应用或页面。每个 <code>ptah</code> 实例都需要一个唯一的 ID。</li><li><strong>isProd</strong>: (可选) 用于指定当前环境是否为生产环境。默认为 <code>false</code>，如果设置为 <code>true</code>，则该实例会在生产环境下进行配置。</li><li><strong>schema</strong>: (可选) 用于初始化页面的数据，通常是一个 JSON 对象，包含了页面或应用的结构。该参数可以让你直接传入初始数据，从而进行页面渲染。</li></ul><h3 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h3><h4 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { usePtah } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@ptahjs/creative-vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ptahInstance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> usePtah</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ve1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 唯一的实例 ID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    isProd: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 设置为开发环境</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // schema: pageJson  // 可选，传入页面结构数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h4 id="与-provider-组件一起使用" tabindex="-1">与 <code>&lt;Provider&gt;</code> 组件一起使用 <a class="header-anchor" href="#与-provider-组件一起使用" aria-label="Permalink to &quot;与 \`&lt;Provider&gt;\` 组件一起使用&quot;">​</a></h4><p>在 Vue 中，<code>usePtah()</code> 必须和 <code>&lt;Provider&gt;</code> 组件一起使用。<code>&lt;Provider&gt;</code> 组件用于接收和管理 <code>ptah</code> 实例，确保你能在整个应用中使用这个实例。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!-- 将 ptah 实例传递给 Provider 组件 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Provider</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ptahInstance&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        &lt;!-- 其他组件或内容 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { usePtah } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@ptahjs/creative-vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建 ptah 实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ptahInstance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> usePtah</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app-1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    isProd: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 开发环境</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // schema: pageJson  // 初始化数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模拟异步获取数据并更新 schema</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ptahInstance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">schema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pageJson); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 页面结构数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><ul><li><strong>初始化应用</strong>: <code>usePtah</code> 允许你为每个页面或应用实例提供独立的 ID 和配置，帮助你在多页面或多应用的情况下进行管理。</li><li><strong>环境区分</strong>: <code>isProd</code> 参数能根据环境自动配置，方便你在开发和生产环境下切换不同的配置。</li><li><strong>异步数据处理</strong>: 你可以在应用加载后通过 <code>schema</code> 更新页面内容，支持异步加载和动态更新。</li></ul><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ol><li><strong>ID 唯一性</strong>: 确保每个 <code>ptah</code> 实例的 <code>id</code> 唯一，以避免冲突。</li><li><strong>Provider 配置</strong>: 使用 <code>usePtah</code> 创建实例时，必须确保其包装在 <code>&lt;Provider&gt;</code> 组件中，否则无法正常使用。</li><li><strong>异步数据更新</strong>: 如果需要动态更新页面结构，可以通过 <code>ptahInstance.schema()</code> 方法来进行异步更新。</li></ol>`,15)]))}const c=i(h,[["render",e]]);export{E as __pageData,c as default};
