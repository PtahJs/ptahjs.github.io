import{_ as i,c as a,o as n,af as e}from"./chunks/framework.D6bkN3-B.js";const o=JSON.parse('{"title":"常量类型","description":"","frontmatter":{},"headers":[],"relativePath":"zh/api/types.md","filePath":"zh/api/types.md"}'),t={name:"zh/api/types.md"};function l(h,s,p,k,E,r){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="常量类型" tabindex="-1">常量类型 <a class="header-anchor" href="#常量类型" aria-label="Permalink to &quot;常量类型&quot;">​</a></h1><h2 id="模块类型" tabindex="-1"><code>模块类型</code> <a class="header-anchor" href="#模块类型" aria-label="Permalink to &quot;\`模块类型\`&quot;">​</a></h2><p><code>MODULE_TYPE</code> 是一个内置常量对象，用于表示不同的节点类型。每种类型都代表一个特定的组件或节点，在项目结构中具有不同的作用。</p><h4 id="可用类型" tabindex="-1">可用类型： <a class="header-anchor" href="#可用类型" aria-label="Permalink to &quot;可用类型：&quot;">​</a></h4><ul><li><strong><code>MODULE_TYPE.ROOT</code></strong>: 根节点，表示项目的顶层节点。</li><li><strong><code>MODULE_TYPE.SCENE_PAGE</code></strong>: 场景页面节点，用于表示一个页面的场景内容。</li><li><strong><code>MODULE_TYPE.MODAL_PAGE</code></strong>: 模态框页面节点，表示在当前页面上弹出的模态框。</li><li><strong><code>MODULE_TYPE.DRAWER_PAGE</code></strong>: 抽屉页面节点，表示从页面侧边滑出的抽屉。</li><li><strong><code>MODULE_TYPE.COMPONENT</code></strong>: 组件类型节点，表示一个具体的可复用组件。</li><li><strong><code>MODULE_TYPE.COMPONENT_GROUP</code></strong>: 组件组合类型节点，表示多个组件的组合。</li><li><strong><code>MODULE_TYPE.BLOCK</code></strong>: 占位块节点，表示页面中的占位元素。</li><li><strong><code>MODULE_TYPE.EVENT</code></strong>: 事件类型节点，用于处理特定的事件响应。</li></ul><h4 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nodeType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MODULE_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SCENE_PAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (nodeType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MODULE_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ROOT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 执行根节点的相关逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="资源类型" tabindex="-1">资源类型 <a class="header-anchor" href="#资源类型" aria-label="Permalink to &quot;资源类型&quot;">​</a></h2><p><code>RESOURCE_TYPE</code> 是一个内置常量对象，用于标识类中的不同资源类型。资源类型帮助系统区分和管理不同的资源。</p><h4 id="可用类型-1" tabindex="-1">可用类型： <a class="header-anchor" href="#可用类型-1" aria-label="Permalink to &quot;可用类型：&quot;">​</a></h4><ul><li><strong><code>RESOURCE_TYPE.SCENE_PROPS</code></strong>: 场景参数资源类型，表示场景的配置或属性。</li><li><strong><code>RESOURCE_TYPE.BLOCKS</code></strong>: 模块类型资源，表示页面中的块元素或模块。</li></ul><h4 id="示例-1" tabindex="-1">示例 <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> resourceType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RESOURCE_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SCENE_PROPS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (resourceType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RESOURCE_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BLOCKS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 执行与模块资源相关的逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="拖拽类型" tabindex="-1">拖拽类型 <a class="header-anchor" href="#拖拽类型" aria-label="Permalink to &quot;拖拽类型&quot;">​</a></h2><p><code>DND_ITEM_TYPE</code> 是一个内置常量对象，用于标识不同的拖拽项目类型。此类型可用于区分不同的拖拽操作，例如场景项目或模块项目。</p><h4 id="可用类型-2" tabindex="-1">可用类型： <a class="header-anchor" href="#可用类型-2" aria-label="Permalink to &quot;可用类型：&quot;">​</a></h4><ul><li><strong><code>DND_ITEM_TYPE.SCENE_ITEM</code></strong>: 场景项目，表示当前拖拽的项目属于场景。</li><li><strong><code>DND_ITEM_TYPE.MODULE_ITEM</code></strong>: 模块项目，表示当前拖拽的项目属于模块。</li></ul><h4 id="示例-2" tabindex="-1">示例 <a class="header-anchor" href="#示例-2" aria-label="Permalink to &quot;示例&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dragItemType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DND_ITEM_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SCENE_ITEM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (dragItemType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DND_ITEM_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MODULE_ITEM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 执行与模块项目相关的拖拽操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="生命周期类型" tabindex="-1">生命周期类型 <a class="header-anchor" href="#生命周期类型" aria-label="Permalink to &quot;生命周期类型&quot;">​</a></h2><p><code>LIFECYCLE_TYPE</code> 是一个内置常量对象，用于标识不同的生命周期阶段或事件类型。这些生命周期类型帮助系统在不同阶段执行特定的操作。</p><h4 id="可用类型-3" tabindex="-1">可用类型： <a class="header-anchor" href="#可用类型-3" aria-label="Permalink to &quot;可用类型：&quot;">​</a></h4><ul><li><strong><code>LIFECYCLE_TYPE.BEFORE_TRANSFORM_DATA</code></strong>: 数据处理前阶段，通常用于处理和修改数据之前的操作。</li><li><strong><code>LIFECYCLE_TYPE.AFTER_TRANSFORM_DATA</code></strong>: 数据处理后阶段，用于在数据处理完成后进行额外的操作。</li><li><strong><code>LIFECYCLE_TYPE.GET_JSON_DATA</code></strong>: 获取 JSON 数据阶段，通常用于提取或处理 JSON 数据。</li><li><strong><code>LIFECYCLE_TYPE.RENDERER_DEVELOPMENT_CONTENT</code></strong>: 渲染开发环境内容，表示在开发环境下进行的渲染操作。</li><li><strong><code>LIFECYCLE_TYPE.RENDERER_PRODUCTION_CONTENT</code></strong>: 渲染生成环境内容，表示在生产环境下进行的渲染操作。</li></ul><h4 id="示例-3" tabindex="-1">示例 <a class="header-anchor" href="#示例-3" aria-label="Permalink to &quot;示例&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> lifecycleStage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LIFECYCLE_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GET_JSON_DATA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lifecycleStage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LIFECYCLE_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BEFORE_TRANSFORM_DATA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 执行数据处理前的操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,28)]))}const c=i(t,[["render",l]]);export{o as __pageData,c as default};
