import{_ as i,c as a,o as e,af as n}from"./chunks/framework.D6bkN3-B.js";const c=JSON.parse('{"title":"Application Instance API","description":"","frontmatter":{},"headers":[],"relativePath":"api/application.md","filePath":"api/application.md"}'),t={name:"api/application.md"};function p(l,s,h,o,d,r){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="application-instance-api" tabindex="-1">Application Instance API <a class="header-anchor" href="#application-instance-api" aria-label="Permalink to &quot;Application Instance API&quot;">​</a></h1><h2 id="createptah" tabindex="-1"><code>createPtah()</code> <a class="header-anchor" href="#createptah" aria-label="Permalink to &quot;\`createPtah()\`&quot;">​</a></h2><p>This method is used to create a new application instance. Through this instance, you can access various features and configurations of the application.</p><ul><li><p><strong>Description</strong><br><code>id</code> is a required parameter that uniquely identifies each application instance, ensuring isolation between different instances. Other settings of the application can be configured as needed.<br><code>licenseKey</code> is a required parameter, the authorization code.</p></li><li><p><strong>Parameters</strong></p><ul><li><code>id</code> (String): The unique identifier for the application instance, cannot be empty.</li><li><code>licenseKey</code> (String): The authorization code for the application instance, cannot be empty.</li></ul></li><li><p><strong>Example</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createPtah } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@ptahjs/creative-vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createPtah</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app-1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Set the unique ID for the application instance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    licenseKey: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;******&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></li></ul><h2 id="app-id" tabindex="-1"><code>app.id</code> <a class="header-anchor" href="#app-id" aria-label="Permalink to &quot;\`app.id\`&quot;">​</a></h2><p>This property is used to get the unique identifier of the current application instance. It allows you to easily access and validate the current application instance.</p><ul><li><p><strong>Description</strong><br><code>app.id</code> returns the <code>id</code> value of the application instance, helping developers distinguish between instances in a multi-instance environment.</p></li><li><p><strong>Example</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(app.id); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: &#39;ptah-app-1&#39;</span></span></code></pre></div></li></ul><h2 id="app-modetype" tabindex="-1"><code>app.modeType</code> <a class="header-anchor" href="#app-modetype" aria-label="Permalink to &quot;\`app.modeType\`&quot;">​</a></h2><p>This property returns the mode type used by the current application. It can be used to differentiate between application running modes, helping with configuration and rendering in different scenarios.</p><ul><li><p><strong>Description</strong><br><code>modeType</code> returns the current application&#39;s mode, such as <code>WEB</code>, <code>MOBILE</code>, <code>CANVAS</code>, etc. You can switch between different modes as needed.</p></li><li><p><strong>Example</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(app.modeType); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: &#39;WEB&#39;</span></span></code></pre></div><p>See <a href="#">Mode Types</a> for more information.</p></li></ul><h2 id="app-load" tabindex="-1"><code>app.$load()</code> <a class="header-anchor" href="#app-load" aria-label="Permalink to &quot;\`app.$load()\`&quot;">​</a></h2><p>This method is used to load various resources required by the application. In editing mode, you need to load block data, scene parameters, and events, among other things.</p><ul><li><p><strong>Description</strong><br><code>app.$load()</code> allows you to load different types of resources dynamically, enabling flexible expansion of the application&#39;s functionality at runtime.</p></li><li><p><strong>Parameters</strong></p><ul><li><code>resourceType</code> (String): The type of resource (e.g., <code>BLOCKS</code>, <code>SCENE_PROPS</code>, <code>SCENE_EVENTS</code>).</li><li><code>data</code> (Array): The resource data to be loaded.</li></ul></li><li><p><strong>Example</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { RESOURCE_TYPE } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@ptahjs/creative-vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Load modules, scene parameters, and events</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RESOURCE_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BLOCKS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, []);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RESOURCE_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SCENE_PROPS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, []);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RESOURCE_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SCENE_EVENTS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, []);</span></span></code></pre></div><p>See <a href="#">Resource Types</a> for more information.</p></li></ul><h2 id="app-proxydata" tabindex="-1"><code>app.$proxyData()</code> <a class="header-anchor" href="#app-proxydata" aria-label="Permalink to &quot;\`app.$proxyData()\`&quot;">​</a></h2><p>This method is used to proxy data within the application, turning it into reactive data. It is suitable for Vue 3 projects, where you can easily achieve reactive data management through data proxying.</p><ul><li><p><strong>Description</strong><br><code>app.$proxyData()</code> accepts a function that returns the proxied data, ensuring that data is updated in real-time in the view.</p></li><li><p><strong>Example</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$proxyData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data));</span></span></code></pre></div></li></ul><h2 id="app-lifecycle" tabindex="-1"><code>app.$lifecycle()</code> <a class="header-anchor" href="#app-lifecycle" aria-label="Permalink to &quot;\`app.$lifecycle()\`&quot;">​</a></h2><p>Lifecycle management method, typically used in plugin development. Through this method, plugins can modify data during specific lifecycle stages of the application, helping to implement more refined control.</p><ul><li><p><strong>Description</strong><br><code>app.$lifecycle()</code> can register hook functions to modify data at different stages of the application&#39;s lifecycle. For example, you can intervene before data transformation or perform other actions after data is loaded.</p></li><li><p><strong>Parameters</strong></p><ul><li><code>lifecycleType</code> (String): The lifecycle type, such as <code>BEFORE_TRANSFORM_DATA</code>.</li><li><code>callback</code> (Function): A hook function for executing custom operations.</li></ul></li><li><p><strong>Example</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { LIFECYCLE_TYPE } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@ptahjs/creative-vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;TestPlugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        engine.$lifecycle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">notify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LIFECYCLE_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BEFORE_TRANSFORM_DATA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;BEFORE_TRANSFORM_DATA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Modify and return the data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>See <a href="#">Lifecycle Types</a> for more information.</p></li></ul><h2 id="app-blocks" tabindex="-1"><code>app.$blocks()</code> <a class="header-anchor" href="#app-blocks" aria-label="Permalink to &quot;\`app.$blocks()\`&quot;">​</a></h2><p>This method is used to load and dynamically add block data. Blocks are the core modules for building applications, and this method allows you to adjust the module content dynamically.</p><ul><li><p><strong>Description</strong><br><code>app.$blocks()</code> can load multiple block configurations and add them to the application. It supports dynamic updates to the block data, making it suitable for use in editing mode.</p></li><li><p><strong>Example</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.$blocks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Remote Component&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        icon: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;icon-detail&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        items: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                icon: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;icon-detail&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                items: [data.data]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span></code></pre></div><p>See <a href="#">Block Data</a> for more information.</p></li></ul><h2 id="app-vueinstance" tabindex="-1"><code>app.$vueInstance()</code> <a class="header-anchor" href="#app-vueinstance" aria-label="Permalink to &quot;\`app.$vueInstance()\`&quot;">​</a></h2><p>This method is used to bind a Vue instance to the application. Through this method, you can automatically register Vue components and perform other Vue-related operations within the application.</p><ul><li><p><strong>Description</strong><br><code>app.$vueInstance()</code> allows you to directly register Vue components in the application, simplifying Vue instance management.</p></li><li><p><strong>Example</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createApp } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> App </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./App.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(App);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptahInstance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$vueInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(app);</span></span></code></pre></div></li></ul><h2 id="app-mode" tabindex="-1"><code>app.$mode()</code> <a class="header-anchor" href="#app-mode" aria-label="Permalink to &quot;\`app.$mode()\`&quot;">​</a></h2><p>This method is used to set the application’s scene mode. By choosing different scene modes, you can control how the application appears, adapting to different platforms or requirements.</p><ul><li><p><strong>Description</strong><br><code>app.$mode()</code> accepts a scene mode as a parameter, allowing you to select different extended scene modes such as Web, Mobile, or 3D.</p></li><li><p><strong>Example</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ModeWeb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@ptahjs/mode-web&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptahInstance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ModeWeb);</span></span></code></pre></div></li></ul><h2 id="app-use" tabindex="-1"><code>app.use()</code> <a class="header-anchor" href="#app-use" aria-label="Permalink to &quot;\`app.use()\`&quot;">​</a></h2><p>This method is used to install plugins or other functional modules into the application.</p><ul><li><strong>Description</strong><br><code>app.use()</code> allows you to dynamically install plugins or libraries into the application, extending its functionality.</li></ul><h2 id="app-schema" tabindex="-1"><code>app.schema()</code> <a class="header-anchor" href="#app-schema" aria-label="Permalink to &quot;\`app.schema()\`&quot;">​</a></h2><p>This method is used to load schema data, display it, and render it as a page.</p><ul><li><strong>Description</strong><br><code>app.schema()</code> allows you to dynamically load schema data into the application.</li></ul><h2 id="app-mount" tabindex="-1"><code>app.mount()</code> <a class="header-anchor" href="#app-mount" aria-label="Permalink to &quot;\`app.mount()\`&quot;">​</a></h2><p>This method is used to mount and start the application. Through the <code>mount()</code> method, you can officially start the application, render it, and handle events.</p><ul><li><strong>Note</strong><br> Methods with a <code>$</code> prefix are built-in plugin extensions that support method chaining to simplify the configuration process.</li></ul><h2 id="app-unmount" tabindex="-1"><code>app.unmount()</code> <a class="header-anchor" href="#app-unmount" aria-label="Permalink to &quot;\`app.unmount()\`&quot;">​</a></h2><p>This method is used to unmount the application instance and stop all operations.</p><h2 id="chaining-support" tabindex="-1">Chaining Support <a class="header-anchor" href="#chaining-support" aria-label="Permalink to &quot;Chaining Support&quot;">​</a></h2><p>You can complete multiple configuration and initialization steps in a single call through method chaining, improving the simplicity and readability of the code.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ptahInstance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createPtah</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app-1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    licenseKey: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;******&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vueInstance)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ModeWeb)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RESOURCE_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BLOCKS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>`,42)]))}const E=i(t,[["render",p]]);export{c as __pageData,E as default};
