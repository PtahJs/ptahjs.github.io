import{_ as t,c as a,o as i,af as s}from"./chunks/framework.D6bkN3-B.js";const u=JSON.parse('{"title":"<ModulesRenderer>","description":"","frontmatter":{},"headers":[],"relativePath":"zh/api/built-ins/ModulesRenderer.md","filePath":"zh/api/built-ins/ModulesRenderer.md"}'),d={name:"zh/api/built-ins/ModulesRenderer.md"};function l(o,e,r,n,c,h){return i(),a("div",null,e[0]||(e[0]=[s('<h1 id="modulesrenderer" tabindex="-1"><code>&lt;ModulesRenderer&gt;</code> <a class="header-anchor" href="#modulesrenderer" aria-label="Permalink to &quot;`&lt;ModulesRenderer&gt;`&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>内置组件无需注册，便可以直接在模板中使用。</p></div><p><code>&lt;ModulesRenderer&gt;</code> 组件用于渲染指定的模块内容，适用于需要动态渲染模块项的场景。它必须在 <code>&lt;Provider&gt;</code> 组件的上下文中使用，并接受一个 <code>item</code> 属性，用于传入渲染的模块数据。</p><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><ul><li><strong>item</strong> (<code>Object</code>): <ul><li>需要渲染的模块项，通常是一个对象，包含模块的详细数据。</li><li><strong>示例</strong>: <code>item.items[0]</code>，其中 <code>items</code> 是包含多个模块项的数组，<code>[0]</code> 是其中一个模块。</li></ul></li></ul><h3 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h3><h4 id="基本示例" tabindex="-1">基本示例 <a class="header-anchor" href="#基本示例" aria-label="Permalink to &quot;基本示例&quot;">​</a></h4><p>在基本的用法中，<code>&lt;ModulesRenderer&gt;</code> 组件会根据传入的 <code>item</code> 渲染对应的模块内容：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ModulesRenderer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;item.items[0]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在上面的示例中，<code>item.items[0]</code> 是传入的模块数据，<code>&lt;ModulesRenderer&gt;</code> 将根据这个数据来渲染对应的模块。</p><h3 id="配置和自定义" tabindex="-1">配置和自定义 <a class="header-anchor" href="#配置和自定义" aria-label="Permalink to &quot;配置和自定义&quot;">​</a></h3><p><code>&lt;ModulesRenderer&gt;</code> 会根据传入的模块数据自动渲染相关的内容。你可以通过动态改变 <code>item</code> 数据，控制渲染不同的模块项。</p><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li>请确保 <code>&lt;ModulesRenderer&gt;</code> 组件始终在 <code>&lt;Provider&gt;</code> 组件的上下文中使用，因为它依赖于 <code>&lt;Provider&gt;</code> 提供的全局状态或功能。</li><li><code>item</code> 数据必须是有效的模块数据对象，包含需要渲染的内容和配置。</li></ul><h3 id="配合其他组件使用" tabindex="-1">配合其他组件使用 <a class="header-anchor" href="#配合其他组件使用" aria-label="Permalink to &quot;配合其他组件使用&quot;">​</a></h3><p><code>&lt;ModulesRenderer&gt;</code> 组件可以与其他模块相关组件（如 <code>&lt;ModuleConfigureWidget&gt;</code> 或 <code>&lt;EventsWidget&gt;</code>）结合使用，构建更复杂的模块渲染和交互体验。</p>',16)]))}const k=t(d,[["render",l]]);export{u as __pageData,k as default};
