import{_ as s,c as a,o as i,af as t}from"./chunks/framework.D6bkN3-B.js";const k=JSON.parse('{"title":"Constant Types","description":"","frontmatter":{},"headers":[],"relativePath":"api/types.md","filePath":"api/types.md"}'),n={name:"api/types.md"};function l(p,e,r,o,h,d){return i(),a("div",null,e[0]||(e[0]=[t(`<h1 id="constant-types" tabindex="-1">Constant Types <a class="header-anchor" href="#constant-types" aria-label="Permalink to &quot;Constant Types&quot;">​</a></h1><h2 id="module-types" tabindex="-1"><code>Module Types</code> <a class="header-anchor" href="#module-types" aria-label="Permalink to &quot;\`Module Types\`&quot;">​</a></h2><p><code>MODULE_TYPE</code> is a built-in constant object used to represent different node types. Each type represents a specific component or node with a distinct role in the project structure.</p><h4 id="available-types" tabindex="-1">Available Types: <a class="header-anchor" href="#available-types" aria-label="Permalink to &quot;Available Types:&quot;">​</a></h4><ul><li><strong><code>MODULE_TYPE.ROOT</code></strong>: Root node, representing the top-level node of the project.</li><li><strong><code>MODULE_TYPE.SCENE_PAGE</code></strong>: Scene page node, representing the scene content of a page.</li><li><strong><code>MODULE_TYPE.MODAL_PAGE</code></strong>: Modal page node, representing a modal that pops up on the current page.</li><li><strong><code>MODULE_TYPE.DRAWER_PAGE</code></strong>: Drawer page node, representing a drawer that slides in from the side of the page.</li><li><strong><code>MODULE_TYPE.COMPONENT</code></strong>: Component type node, representing a specific reusable component.</li><li><strong><code>MODULE_TYPE.COMPONENT_GROUP</code></strong>: Component group type node, representing a combination of multiple components.</li><li><strong><code>MODULE_TYPE.BLOCK</code></strong>: Block node, representing a placeholder element on the page.</li><li><strong><code>MODULE_TYPE.EVENT</code></strong>: Event type node, used to handle specific event responses.</li></ul><h4 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nodeType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MODULE_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SCENE_PAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (nodeType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MODULE_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ROOT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Perform root node related logic</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="resource-types" tabindex="-1">Resource Types <a class="header-anchor" href="#resource-types" aria-label="Permalink to &quot;Resource Types&quot;">​</a></h2><p><code>RESOURCE_TYPE</code> is a built-in constant object used to identify different resource types within the class. Resource types help the system distinguish and manage different resources.</p><h4 id="available-types-1" tabindex="-1">Available Types: <a class="header-anchor" href="#available-types-1" aria-label="Permalink to &quot;Available Types:&quot;">​</a></h4><ul><li><strong><code>RESOURCE_TYPE.SCENE_PROPS</code></strong>: Scene properties resource type, representing the configuration or properties of a scene.</li><li><strong><code>RESOURCE_TYPE.BLOCKS</code></strong>: Module type resource, representing block elements or modules within a page.</li></ul><h4 id="example-1" tabindex="-1">Example <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> resourceType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RESOURCE_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SCENE_PROPS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (resourceType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RESOURCE_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BLOCKS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Perform logic related to module resources</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="drag-and-drop-types" tabindex="-1">Drag-and-Drop Types <a class="header-anchor" href="#drag-and-drop-types" aria-label="Permalink to &quot;Drag-and-Drop Types&quot;">​</a></h2><p><code>DND_ITEM_TYPE</code> is a built-in constant object used to identify different types of drag-and-drop items. This type can be used to differentiate between different drag operations, such as scene items or module items.</p><h4 id="available-types-2" tabindex="-1">Available Types: <a class="header-anchor" href="#available-types-2" aria-label="Permalink to &quot;Available Types:&quot;">​</a></h4><ul><li><strong><code>DND_ITEM_TYPE.SCENE_ITEM</code></strong>: Scene item, representing an item being dragged from the scene.</li><li><strong><code>DND_ITEM_TYPE.MODULE_ITEM</code></strong>: Module item, representing an item being dragged from a module.</li></ul><h4 id="example-2" tabindex="-1">Example <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dragItemType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DND_ITEM_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SCENE_ITEM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (dragItemType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DND_ITEM_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MODULE_ITEM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Perform drag operation related to module items</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="lifecycle-types" tabindex="-1">Lifecycle Types <a class="header-anchor" href="#lifecycle-types" aria-label="Permalink to &quot;Lifecycle Types&quot;">​</a></h2><p><code>LIFECYCLE_TYPE</code> is a built-in constant object used to represent different lifecycle stages or event types. These lifecycle types help the system perform specific actions at different stages.</p><h4 id="available-types-3" tabindex="-1">Available Types: <a class="header-anchor" href="#available-types-3" aria-label="Permalink to &quot;Available Types:&quot;">​</a></h4><ul><li><strong><code>LIFECYCLE_TYPE.BEFORE_TRANSFORM_DATA</code></strong>: Before data transformation stage, usually used to handle and modify data before processing.</li><li><strong><code>LIFECYCLE_TYPE.AFTER_TRANSFORM_DATA</code></strong>: After data transformation stage, used for additional operations after data has been processed.</li><li><strong><code>LIFECYCLE_TYPE.GET_JSON_DATA</code></strong>: Retrieve JSON data stage, typically used to extract or handle JSON data.</li><li><strong><code>LIFECYCLE_TYPE.RENDERER_DEVELOPMENT_CONTENT</code></strong>: Render content in development environment, representing rendering actions in the development environment.</li><li><strong><code>LIFECYCLE_TYPE.RENDERER_PRODUCTION_CONTENT</code></strong>: Render content in production environment, representing rendering actions in the production environment.</li></ul><h4 id="example-3" tabindex="-1">Example <a class="header-anchor" href="#example-3" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> lifecycleStage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LIFECYCLE_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GET_JSON_DATA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lifecycleStage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LIFECYCLE_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BEFORE_TRANSFORM_DATA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Perform operations before data transformation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,28)]))}const c=s(n,[["render",l]]);export{k as __pageData,c as default};
